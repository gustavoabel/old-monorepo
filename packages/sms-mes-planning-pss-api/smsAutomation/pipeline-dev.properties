# overall build environment and global vars
build=dotnet
targetRegion=eu-central-1
AWSAccountId=919545212340

# Build NPM function if "true" all vars need to be filled, otherwise "false"
npmBuild=false
npmPrepare=
npmBuildParam=

# Python Environment function if "true" all vars need to be filled, otherwise "false"
pythonBuild=false
pythonBuildParam=
pythonRUN=

# Conda Environment function if "true" all vars need to be filled, otherwise "false"
condaBuild=false
programmFolder=
condaEnvName=

# s3Deployment function if "true" all vars need to be filled, otherwise "false"
s3Deploy=false
targetBucket=
uploadFolder=

# Build NPM function if "true" all vars need to be filled, otherwise "false"
dotNETDeploy=false
dotNETPrepare=
dotNETBuildParam=

# fargateDeployment function if "true" all vars need to be filled, otherwise "false"
fargateDeploy=false
EcsCluster=

# Kubernetes deployment function if "true" all vars need to be filled, otherwise "false"
k8sDeploy=true
namespace=development
dockerbuild=new
## Necessary for AWS external deployments for example to Yandex.Cloud or Alibaba
k8sAwsExternal=false
# Cloud provider: aws,yandex,alibaba,gcp,azure,other
cloud=
customer=

# Notification
slack=true
slackChannel=team-mes

# Unit tests
## The tests are run on a Jenkins machine that is a full Linux instance with python onboard.
## Before starting, we need to install the project, this time with the dev dependencies: they include
## test suites, linters, etc. The tests must generate a JUnit-compatible XML report.
unitTest=false
unitTestCommand=cd ppq-db-update-util && \
                python -m pip install --user "poetry==1.1.4" && \
                python -m poetry export -o requirements.txt --without-hashes --dev && \
                python -m pip install --user -r requirements.txt && \
                PYTHONPATH=src python -m pytest tests --junitxml="build/test-reports/report.xml"
testPath=tests

# Linters
runLinter=false
## Run the linter - the output line is necessary - the name of the file ".out" need to be same like the chosen linter
## example: build/test-reports/pyLint.out
linterCommand=cd ppq-db-update-util && \
              python -m pylint -f parseable -j 0 --exit-zero src > build/test-reports/pyLint.out

## Choose the right linter, multiple choice possible, please "," separated -> https://github.com/jenkinsci/warnings-ng-plugin/blob/master/SUPPORTED-FORMATS.md
linter=pyLint
## base is always the project folder ${serviceName}/ *** Filename will be "<linterName>.out" ! please don't add the name manually !
## example: build/test-reports/pyLint.out
linterResultsPath=build/test-reports/